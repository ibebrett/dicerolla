{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["DICE_SIDES","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","sides","count","rolls","total","i","roll","Math","floor","random","push","setState","e","target","value","_this2","react_default","a","createElement","className","onChange","sidesChange","map","val","index","key","type","countChange","onClick","rollDice","r","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAGMA,SAAa,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,KAsErBC,cAnEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,MAAO,EACPC,MAAO,EACPC,MAAO,GACPC,MAAO,MAPQX,0EAcjB,IAFA,IAAIU,EAAQ,GACRC,EAAQ,EACHC,EAAI,EAAGA,EAAIT,KAAKI,MAAME,MAAOG,IAAK,CACzC,IAAMC,EAAOC,KAAKC,MAAMD,KAAKE,SAAWb,KAAKI,MAAMC,OAAS,EAC5DE,EAAMO,KAAKJ,GACXF,GAASE,EAEXV,KAAKe,SAAS,CAAER,MAAOA,EAAOC,MAAOA,wCAE3BQ,GACVhB,KAAKe,SAAS,CAAET,MAAOU,EAAEC,OAAOC,4CAGtBF,GACVhB,KAAKe,SAAS,CAAEV,MAAOW,EAAEC,OAAOC,yCAGzB,IAAAC,EAAAnB,KACHQ,EAAQ,GAIZ,OAHyB,OAArBR,KAAKI,MAAMI,QACbA,EAAQY,EAAAC,EAAAC,cAAA,mBAAWtB,KAAKI,MAAMI,QAG9BY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,sBAEEF,EAAAC,EAAAC,cAAA,UAAQJ,MAAOlB,KAAKK,MAAOmB,SAAU,SAAAR,GAAC,OAAIG,EAAKM,YAAYT,KACxDtB,EAAWgC,IAAI,SAACC,EAAKC,GAAN,OACdR,EAAAC,EAAAC,cAAA,UAAQO,IAAKF,GAAMA,OAIzBP,EAAAC,EAAAC,cAAA,sBAEEF,EAAAC,EAAAC,cAAA,SACEQ,KAAK,SACLZ,MAAOlB,KAAKI,MAAME,MAClBkB,SAAU,SAAAR,GAAC,OAAIG,EAAKY,YAAYf,OAGpCI,EAAAC,EAAAC,cAAA,UAAQU,QAAS,kBAAMb,EAAKc,aAA5B,SACAb,EAAAC,EAAAC,cAAA,WACGtB,KAAKI,MAAMG,MAAMmB,IAAI,SAACQ,EAAGzB,GAAJ,OACpBW,EAAAC,EAAAC,cAAA,KAAGO,IAAKpB,GAAIyB,KAEb1B,YA5DK2B,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f834b4f2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nconst DICE_SIDES = [2, 4, 6, 8, 10, 12];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sides: 6,\n      count: 3,\n      rolls: [],\n      total: null\n    };\n  }\n\n  rollDice() {\n    let rolls = [];\n    let total = 0;\n    for (let i = 0; i < this.state.count; i++) {\n      const roll = Math.floor(Math.random() * this.state.sides) + 1;\n      rolls.push(roll);\n      total += roll;\n    }\n    this.setState({ rolls: rolls, total: total });\n  }\n  countChange(e) {\n    this.setState({ count: e.target.value });\n  }\n\n  sidesChange(e) {\n    this.setState({ sides: e.target.value });\n  }\n\n  render() {\n    let total = \"\";\n    if (this.state.total !== null) {\n      total = <p>Total: {this.state.total}</p>;\n    }\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>Dice Rolla</p>\n          <label>\n            Sides:\n            <select value={this.sides} onChange={e => this.sidesChange(e)}>\n              {DICE_SIDES.map((val, index) => (\n                <option key={val}>{val}</option>\n              ))}\n            </select>\n          </label>\n          <label>\n            Count:\n            <input\n              type=\"number\"\n              value={this.state.count}\n              onChange={e => this.countChange(e)}\n            />\n          </label>\n          <button onClick={() => this.rollDice()}>Roll!</button>\n          <div>\n            {this.state.rolls.map((r, i) => (\n              <p key={i}>{r}</p>\n            ))}\n            {total}\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}